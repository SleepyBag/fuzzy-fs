#!/bin/zsh

function _fuzzy-fs-ls-panel {
    # for debug
    local field=ls-panel

    # key bindings
    local key_enter=${FUZZY_FS_KEY_ENTER:-Enter}
    local key_delete=${FUZZY_FS_KEY_DELETE:-Ctrl-D}
    local key_exit=${FUZZY_FS_KEY_EXIT:-Ctrl-Q}
    local key_parent=${FUZZY_FS_KEY_PARENT:-Ctrl-U}
    local key_edit=${FUZZY_FS_KEY_EDIT:-Ctrl-O}
    local key_refresh=${FUZZY_FS_KEY_REFRESH:-Ctrl-R}
    local key_find=${FUZZY_FS_KEY_FIND:-Ctrl-F}
    local key_run_query=${FUZZY_FS_KEY_RUN_QUERY:-Ctrl-Y}
    local key_toggle_hidden=${FUZZY_FS_KEY_TOGGLE_HIDDEN:-Ctrl-A}
    local key_shell=${FUZZY_FS_KEY_SHELL:-Ctrl-I}
    if [[ ! -z "$_per_directory_history_is_global" ]]; then
        local key_toggle_per_directory_history=Ctrl-G
    fi

    # parameters and settings
    local pwd="$1"
    local init_query="$2"
    [[ -z "$no_color" ]] && local color_param=--ansi

    # get header
    local header
    if [[ -z "$no_header" ]]; then
        header+=$'\n'$(_fuzzy-fs-green "Open:")$'\t'$(_fuzzy-fs-white "$key_enter")
        header+=$'\t'$(_fuzzy-fs-green "Delete:")$'\t'$(_fuzzy-fs-white "$key_delete")
        header+=$'\t'$(_fuzzy-fs-green "Edit:")$'\t'$(_fuzzy-fs-white "$key_edit")

        header+=$'\n'$(_fuzzy-fs-green "Exit:")$'\t'$(_fuzzy-fs-white "$key_exit")
        header+=$'\t'$(_fuzzy-fs-green "Refresh:")
        header+=$'\t'$(_fuzzy-fs-white "$key_refresh")

        header+=$'\n'$(_fuzzy-fs-green "Go parent:")$'\t'$(_fuzzy-fs-white "$key_parent")
        header+=$'\n'$(_fuzzy-fs-green "Toggle Hidden:")$'\t'$(_fuzzy-fs-white "$key_toggle_hidden")
        header+=$'\n'$(_fuzzy-fs-green "Find Recursively:")$'\t'$(_fuzzy-fs-white "$key_find")
        header+=$'\n'$(_fuzzy-fs-green "Start Shell Here:")$'\t'$(_fuzzy-fs-white "$key_shell")
        header+=$'\n'$(_fuzzy-fs-green "Run Query as Command:")$'\t'$(_fuzzy-fs-white "$key_run_query")
        if [[ ! -z "$_per_directory_history_is_global" ]]; then
            header+=$'\n'$(_fuzzy-fs-green "Toggle Per Directory History")$'\t'$(_fuzzy-fs-white "$key_toggle_per_directory_history")
        fi
        header+=$'\n'$'\n'
    else
        header=""
    fi
    header+="$(_fuzzy-fs-yellow Directory:) $(_fuzzy-fs-red $pwd)"
    header+=$'\n'" "

    local key item
    local pre_cmds=("_fuzzy-fs-list-file $pwd")
    local incremental_cmds=(
        "echo $ancestor_separator"
        "_fuzzy-fs-list-ancestors $pwd"
        "echo $command_separator"
        "_fuzzy-fs-list-history $pwd"
        "echo $recent_dir_separator"
        "_fuzzy-fs-list-recent-dir $pwd")
    local expect="$key_enter,$key_delete,$key_exit,$key_refresh,$key_parent,$key_edit,$key_run_query,$key_find,$key_toggle_hidden,$key_shell,$key_toggle_per_directory_history"
    _fuzzy-fs-fzf

    _fuzzy-fs-debug-var filename_column

    [[ "$pwd" == "/" ]] && pwd=""

    # then determine cmd
    case "$key" in
        click|$key_enter)
            if [[ "$item" = "$command_icon"* ]]; then
                cmd=run
            else
                cmd=cd-or-open
            fi
            ;;
        $key_parent)
            cmd=cd
            [[ $pwd == "" ]] && target=/ || target=$(dirname $pwd)
            ;;
        $key_delete)
            cmd=rm
            ;;
        $key_edit)
            cmd=edit
            ;;
        $key_find)
            next_panel=_fuzzy-fs-find-panel
            cmd=refresh
            target=none
            ;;
        $key_run_query)
            cmd=run
            target=$query
            ;;
        $key_toggle_hidden)
            cmd=toggle_hidden
            target=none
            ;;
        $key_toggle_per_directory_history)
            cmd=toggle_per_directory_history
            target=none
            ;;
        $key_shell)
            cmd=shell
            target=$pwd
            ;;
        $key_refresh)
            cmd=refresh
            target=none
            ;;
        interrupt|$key_exit)
            cmd=exit
            target=none
            ;;
        error)
            cmd=error
            target=none
            ;;
    esac

    # parse the target first
    if [[ -z "$target" ]]; then
        target=$(_ffs-parse-item "$item")
        if [[ "$item" != "$command_icon"* && "$target" != /* ]]; then
            target="$pwd"/"$target"
        fi
    fi

    if [[ "$cmd" = cd-or-open ]]; then
        if [[ -d "$target" ]]; then
            cmd=cd
        else
            cmd=open
        fi
    fi
}
