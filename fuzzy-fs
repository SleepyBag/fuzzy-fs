#!/bin/zsh

local version=1.0

# for debug
local field=main

export base_dir=$(readlink -f $0 | xargs dirname)
export log_file=$base_dir/.log

export fpath
function use {
    for dir ($argv) {
        dir=$base_dir/$dir
        fpath+=($dir)
        autoload -Uz $(ls -p $dir | grep -v /)
    }
}

use function
use module
use module/ancestors
use module/find
use module/history
use module/ls
use module/recent-dir
use util
use util/colors
use util/debug

echo $fpath

# params
zparseopts -D \
           -no-header=no_header \
           H=no_header \
           -no-color=no_color \
           -all=show_hidden \
           a=show_hidden \
           -debug=debug_mode \
           d=debug_mode \
           -help=help \
           h=help
current_path="$*"
debug_var current_path
debug_var show_hidden
debug_var debug_mode

if [[ ! -z $help ]] {
    cat <<EOF
Usage: fuzzy-fs [options] [DIR]

Open a file navigator powered by fzf at DIR.

Options:
    -a    --all          list hidden files
    -H    --no-header    don't show key-binding tips in header
          --no-color     disable color
    -d    --debug-mode   output debug info into log file
    -v    --version      show version
    -h    --help         show this help
EOF
    exit 0
}

# environment params
export EDITOR=${EDITOR:-vim}
export SHELL=${SHELL:-zsh}
export TERMINAL
if [[ -z $TERMINAL ]] {
    $(which konsole &> /dev/null) && TERMINAL=konsole || \
            $(which konsole &> /dev/null) && TERMINAL=gnome-terminal
}
export PAGER
if [[ -z $PAGER ]] {
    if {which bat &> /dev/null} {
        PAGER="bat --paging=always"
    } elif {which less &> /dev/null} {
        PAGER=less
    } elif {which more &> /dev/null} {
        PAGER=more
    }
}
[[ -d $HOME/.directory_history && -z "$HISTORY_BASE" ]] && export HISTORY_BASE=$HOME/.directory_history

# tunable commands
export preview_command=${FUZZY_FS_PREVIEW_COMMAND:-$base_dir/module/preview}
export ls_command=${FUZZY_FS_LS_COMMAND:-list-file}
export ls_recent_command=${FUZZY_FS_LS_RECENT_COMMAND:-list-recent-dir}
export find_command=${FUZZY_FS_FIND_COMMAND:-find-recursively}
export history_command=${FUZZY_FS_HISTORY_COMMAND:-list-history}
export ancestors_command=${FUZZY_FS_ANCESTORS_COMMAND:-list-ancestors}
export open_command=${FUZZY_FS_OPEN_COMMAND:-xdg-open}

# tunable icons
export file_icon=${FUZZY_FS_FILE_ICON:- fl}
export link_icon=${FUZZY_FS_LINK_ICON:- lk}
export ancestor_icon=${FUZZY_FS_ANCESTOR_ICON:- up}
export directory_icon=${FUZZY_FS_DIRECTORY_ICON:- dr}
export command_icon=${FUZZY_FS_COMMAND_ICON:- cm}
export recent_dir_icon=${FUZZY_FS_RECENT_DIR_ICON:- rf}

# icons cannot be empty because they are neccessary to determine the item type
function check_empty () {
    var_name="$*"
    if [[ ${(P)var_name} == "" ]] {
        echo "$var_name cannot be empty!"
        exit 1
    }
}
check_empty file_icon
check_empty ancestor_icon
check_empty directory_icon
check_empty command_icon
check_empty recent_dir_icon

next_panel=ls-panel
# main loop
while [[ $res_command != exit ]] ; do
    current_path=$(abspath $current_path)
    debug_var current_path

    # show panel
    res=$($next_panel $current_path $pre_query)

    # parse result
    query=$(echo $res | head -n1)
    res_command=$(echo $res | head -n2 | tail -n1)
    target=$(echo $res | tail -n+3)

    pre_query=""
    debug_var res
    debug_var query
    debug_var res_command
    debug_var target
    case "$res_command" in
        open)
            zsh -c "${=open_command} $target" &> /dev/null
            ;;
        cd)
            current_path=$target
            add-recent-dir $current_path
            [[ "$next_panel" == "find-panel" ]] && next_panel=ls-panel
            ;;
        rm)
            rm -ir $target
            ;;
        edit)
            debug_var current_path
            debug_var target
            edit "$current_path" "$target"
            ;;
        run)
            zsh -c "cd $current_path; $target" | $PAGER
            ;;
        find)
            next_panel=find-panel
            ;;
        ls)
            next_panel=ls-panel
            ;;
        shell)
            open-shell "$target"
            pre_query=$query
            ;;
        toggle_hidden)
            [[ -z "$show_hidden" ]] && show_hidden=(-a) || show_hidden=()
            pre_query=$query
            ;;
        exit)
            ;;
        *)
            echo something unexpected happend, please contact the author.
            res_command=exit
            ;;
    esac
done
